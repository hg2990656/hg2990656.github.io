<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Guitar Pro 7 使用</title>
      <link href="2020/11/28/Guitar%20Pro%207%20%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/28/Guitar%20Pro%207%20%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Guitar Pro 7 mac 版界面：</p><p><img src="http://qiniu.yukicj.com/picGo/20201128145751.png"></p><h2 id="和弦库"><a href="#和弦库" class="headerlink" title="和弦库"></a>和弦库</h2><p>点击菜单栏中的<code>音轨—显示和弦资料库</code>，进入自己的和弦库，点击右上角的添加和弦图标就可以进入和弦库查找相应的和弦。</p><img src="http://qiniu.yukicj.com/picGo/20201128150202.png" style="zoom:50%;" /><p>左侧的选项中可以调整想要的和弦类型及组成，以 C 和弦为例：</p><ul><li><p>命名中选择主音为 C，确定为 C 和弦</p></li><li><p>选择类型中包括：</p><p>M - C大三和弦，m - 小三和弦，aug - C 增三和弦，dim - C 减三和弦，7 - C 属七和弦，7M - C 大七和弦，依次类推确定和弦的类型是大小和弦或者七和弦或者挂留和弦等等。</p></li><li><p>选择延伸音：在上述已选的基础上加延伸音，从而得到九和弦、十一和弦、十三和弦。</p></li><li><p>变化音：可以先不选，意思是改变和弦中的某个音增加半度或者减少半度，例如 C 大三和弦，点击 5 度音<code>/5+</code>后，类型中自动变为<code>aug</code>，即升高五音后变为增三和弦。</p></li><li><p>转位和弦中包括最低音和转位：</p><ul><li>保持最低音和和弦根音一样，调整转位则可得到对应的转位和弦。</li><li>调整最低音为和弦外的音，如：C / A，则得到分割和弦。</li></ul></li><li><p>省略和弦内音：获取九和弦、十一和弦、十三和弦时可省去某个音。</p></li></ul><p>选择完后右侧会自动筛选出所有的和弦。</p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吉他乐理(一) 和弦</title>
      <link href="2020/11/28/%E5%90%89%E4%BB%96%E4%B9%90%E7%90%86(%E4%B8%80)%20%E5%92%8C%E5%BC%A6/"/>
      <url>2020/11/28/%E5%90%89%E4%BB%96%E4%B9%90%E7%90%86(%E4%B8%80)%20%E5%92%8C%E5%BC%A6/</url>
      
        <content type="html"><![CDATA[<p>由三个及三个以上的音按照三度关系或者非三度关系（特殊的和弦）叠加组成的一组音即为和弦。</p><h2 id="三和弦"><a href="#三和弦" class="headerlink" title="三和弦"></a>三和弦</h2><p>三和弦由三个音按照三度关系排列组成的。其中最低的音称之为根音，第二个音称之为三音，因为从根音到第二个音是三度关系，第三个音称之为五音或者冠音。</p><img src="http://qiniu.yukicj.com/picGo/20201128111908.png" style="zoom:50%;" /><p>以 C 大调为例说明：</p><p><img src="http://qiniu.yukicj.com/picGo/20201128112455.png"></p><p>其中<strong>一级、四级、五级</strong>和弦均为大三和弦，<strong>二级、三级、六级</strong>为小三和弦，七级为减和弦。</p><p>（1）大三和弦</p><p>大三度（两个全音）  + 小三度（全音+半音），用 1+ 代表高音 1。</p><p>C和弦：1，3，5</p><p>F和弦：4，6，1+</p><p>G和弦：5，7，2+</p><p>（2）小三和弦</p><p>小三度 + 大三度</p><p>Dm：2，4，6（3和4是半音）</p><p>Em：3，5，7</p><p>Am：6 、1+、 3+</p><p>（3）增三和弦</p><p>大三度 + 大三度</p><p>Caug（C增三和弦）：1，3，#5</p><p>（4）减三和弦</p><p>小三度 + 小三度</p><p>Cdim（C减三和弦）：1，b3，b5</p><p>增三和弦和减三和弦是不和协的和弦，减三和弦有一种紧张感和收缩感，增三和弦有一种扩张感，听起来不舒服，实际应用中用得很少。</p><h3 id="属和弦"><a href="#属和弦" class="headerlink" title="属和弦"></a>属和弦</h3><p><img src="http://qiniu.yukicj.com/picGo/20201128112938.png"></p><p>属名只针对唱名，以属音为根音的和弦就叫<strong>属和弦</strong>，C大调中是以 5 为根音的和弦，即 G 和弦。根据调的不同属和弦也不同，在 G 调中 G 和弦就是一级和弦，也就是主和弦，五级和弦是 D 和弦，因此 G 调的属和弦为 D 和弦。</p><h2 id="七和弦"><a href="#七和弦" class="headerlink" title="七和弦"></a>七和弦</h2><p>由四个音组成，在三和弦的基础上加一个<strong>根音的七度音</strong> 。</p><blockquote><p>在自然音阶中，快速判定是不是大七度的方法，可以从根音到冠音中查看两音之间有几个半音，有一个半音的就是大七度。例如：从do-si中间有一个半音（mi-fa），那么，这个七度就是大七度。</p><p>快速判定是不是小七度的方法，可以从根音到冠音中查看两音之间有几个半音，有两个半音的就是小七度。例如：从或re-do中间有两个半音（si-do、mi-fa），那么，这个七度就是小七度。</p></blockquote><p>由于三和弦无论是大三和弦还是小三和弦都一定包含一个半音，因此小七和弦就是在三和弦五音的基础上加一个小三度音，大七和弦就是在三和弦五音的基础上加一个大三度音。</p><h3 id="大七和弦"><a href="#大七和弦" class="headerlink" title="大七和弦"></a>大七和弦</h3><p>在大三和弦的基础上叠加七度音构成的和弦。</p><p>（1）大大七和弦</p><p>大三和弦加<strong>根音的大七度音</strong>，简称大七和弦，大三和弦已经有一个半音，所以加一个和5音相距大三度的音即可。</p><p>例如：CM 7 或者 Cmaj 7（1 3 5 7），Fmaj 7 （4 6 1+ 3+），1+代表高音1</p><p>（2）大小七和弦</p><p>大三和弦加<strong>根音的小七度音</strong>，也叫<strong>属七和弦</strong>。</p><p>例如：C7（1 3 5 b7），G7（5 7 2+ 4+），1的小七度音为b7，5～1为两个全音加一个半音，1～4为2个全音加一个半音。</p><p><img src="http://qiniu.yukicj.com/picGo/20201128113645.png"></p><h3 id="小七和弦"><a href="#小七和弦" class="headerlink" title="小七和弦"></a>小七和弦</h3><p>在小三和弦上叠加七度音构成的七和弦。</p><p><img src="http://qiniu.yukicj.com/picGo/20201128113920.png"></p><p>（1）小大七和弦</p><p>小三和弦加<strong>根音的大七度音</strong>，例如：DmM7（2 4 6 #1+）</p><p>（2）小小七和弦</p><p>小三和弦加<strong>根音的小七度音</strong>，例如：Dm7（2 4 6 1+）</p><p>（3）减小七和弦</p><p>减三和弦加<strong>根音的小七度音</strong>，例如：Bdim7（7 2+ 4+ 6+）</p><p>（4）减减七和弦</p><p>减减七和弦是在减三和弦之上再叠置一个小三度，根音与冠音构成减七度音程。因此减七和弦的结构为：根音与三音是小三度音程、三音与五音是小三度音程，根音到七音是减七度，习惯上称之为“小三加小三加小三”。</p><h2 id="九和弦"><a href="#九和弦" class="headerlink" title="九和弦"></a>九和弦</h2><p>在七和弦的基础上再叠加一个七音的三度音构成九和弦，由5个音组成。</p><p><img src="http://qiniu.yukicj.com/picGo/20201128114646.png"></p><h3 id="属九和弦（九和弦）"><a href="#属九和弦（九和弦）" class="headerlink" title="属九和弦（九和弦）"></a>属九和弦（九和弦）</h3><p>C9（C属9和弦或者C九和弦）： 1 3 5 b7 2+，<strong>属七和弦（大小七和弦）</strong>上加一个<strong>大三度音</strong> 2+，和弦构成为大三度+小三度+小三度+大三度 。</p><img src="http://qiniu.yukicj.com/picGo/20201128125100.png" style="zoom:50%;" /><h3 id="大九和弦"><a href="#大九和弦" class="headerlink" title="大九和弦"></a>大九和弦</h3><p>Cmaj9（C大九和弦），<strong>大大七和弦</strong>的基础上叠加一个<strong>小三度音</strong>，和弦构成为大三度+小三度+大三度+小三度。例如：Cmaj9（1 3 5 7 2+）。</p><img src="http://qiniu.yukicj.com/picGo/20201128125026.png" style="zoom:50%;" /><p>由于一弦和二弦的三品都要按，实际用无名指同时按起来比较难，所以可以用无名指只按二弦3品，一弦作为弦外音不出声，这时就少了 7 这个音，由于吉他的特殊构造，为了按法的简单，减去一些音是被允许的，但是不能<strong>减去代表和弦性质的音</strong>，九和弦的主音和九音肯定是不能省去，<strong>和弦的三音 3 也不能减掉</strong>，因为和弦的三音是决定和弦是大和弦还是小和弦的性质的，1 3 5 组成 C大三和弦，1 b3 5组成C小三和弦。</p><h3 id="加九和弦"><a href="#加九和弦" class="headerlink" title="加九和弦"></a>加九和弦</h3><p>添加和弦是在三和弦的基础上添加某个音组成的和弦，由四个音组成。</p><p>Cadd9 （C加九和弦）：1 3 5 2+，因为是四个音，不符合和弦的定义，所以不是九和弦，C大三和弦的基础上加了一个 9 度音 2+，可以看作是 C 和弦加一个和弦外音</p><img src="http://qiniu.yukicj.com/picGo/20201128114614.png" style="zoom:50%;" /><p><strong>Cadd9 和弦为何不叫做Cadd2 ？</strong></p><p>首先要了解和弦是从音阶发展出来的，和弦不是随便组合出来的。</p><p>再来和弦的组成音都是往音高上去做增加，不会往下去做和弦音的组合说法，所谓好马不吃回头草。所以不会叫做增 2 和弦。以下我们来看一下 Cadd 9 是怎样的一个和弦。从C自然大调音阶里得出</p><p>C D E F G A B C D</p><p>1 大三度 3 小三度 5 大三度 7 小三度 9</p><p>我们从第一个音以大小三度音程，往上去组合和弦到第九个音就是 D 而这个组成出来的和弦，有大七度音 B的存在。这样的声响会非常的具 Jazz 色彩声响。但是相对很多人在使用上，会觉得多了太多西方的和声 Jazz 色彩，所以就把大七度音去掉，就会呈现出具东方色彩的五声音阶和弦。而这个增九和弦，也会比原本单纯的大和弦多了听觉上的动态感。『 CEG静态，CDEG动态 』。所以在流行音乐里经常被使用。</p><p><strong>什么是五声音阶，为何五声音阶里会有『增九和弦』</strong></p><p>在十二音律下，我们可以算出十二个五声音阶。而在此我们就用C的音开始了解五声音阶就好。从C开始算出的纯五度音是 G，而G 的纯五度音是 D ，而D的纯五度音是 A ，而A 的纯五度音是 E。整理一下音高得出 C D E G A 。而这五个音就是五声音阶的组成音。在中国我们给这五个音，另一个名字『宫—商—角—徵—羽』在外国五声音阶的名字是Pentatonic scale。</p><p>在这五声音阶 C D E G A ，基本流行音乐常用前面四个音 C D E G组成和弦就是『 Cadd9 』。而这个五声音阶的音C D E G A全部都使用在和弦的话，还会出现另一个，现代流行音乐会用的一个和弦。那就是叫做『 C69和弦 』和『 C6和弦 』，这三个都是非常有东方色彩的和弦。</p><h2 id="多音和弦"><a href="#多音和弦" class="headerlink" title="多音和弦"></a>多音和弦</h2><p>对于十一和弦和十三和弦，由于组成音过多和吉他的特殊构造，并不能通过一只手按出所有的音，所以实际使用过程中会可以省略一些音。</p><p>十一和弦由 6 个音组成，在九和弦的基础上再加一个十一度音。实际使用中可省去某些音，<strong>主音，三音，十一音</strong>不能省。</p><p>C11和弦：1 3 5 b7 2+ 4+，C属九和弦的基础上叠加一个<strong>小三度音</strong> 4+。</p><img src="http://qiniu.yukicj.com/picGo/20201128132937.png" style="zoom:50%;" /><p>Cmaj11和弦：1 3 5 7 2+ 4+，C大九和弦上叠加一个<strong>小三度音</strong>。</p><img src="http://qiniu.yukicj.com/picGo/20201128133205.png" style="zoom:50%;" /><h2 id="复合和弦"><a href="#复合和弦" class="headerlink" title="复合和弦"></a>复合和弦</h2><h3 id="转位和弦"><a href="#转位和弦" class="headerlink" title="转位和弦"></a>转位和弦</h3><p>通过将和弦的根音或者其他组成音升八度的方式调整和弦的最低音即<strong>根音</strong>，和弦组成音不变，这种转换后的和弦叫做转位和弦，以三和弦为例，三和弦有两个转位和弦：</p><p>C 和弦（1 3 5），第一转位 C6 和弦（3 5 1+），第二转位 C 四六和弦（5 1+ 3+）</p><h4 id="第一转位和弦"><a href="#第一转位和弦" class="headerlink" title="第一转位和弦"></a>第一转位和弦</h4><p>C6 和弦中的 6 代表最低音 3 到根音 1+为 6 度关系，到最高音 1+ 也为 6 度关系，其实可以叫做 C六六和弦。乐谱上的 C / E 代表 C 和弦的第一转位和弦，E = 最低音为 3，作为根音。</p><img src="http://qiniu.yukicj.com/picGo/20201128131154.png" style="zoom:50%;" /><h4 id="第二转位和弦"><a href="#第二转位和弦" class="headerlink" title="第二转位和弦"></a>第二转位和弦</h4><p>第二转位 C 四六和弦代表最低音 5 到根音 1+ 为四度关系，到最高音 3+ 为六度关系</p><img src="http://qiniu.yukicj.com/picGo/20201128131308.png" style="zoom:50%;" /><p>C / G 代表 C 和弦的第二转位和弦，G = 最低音为 5，作为根音。</p><p>七和弦同理，由于有四个音组成，因此七和弦有三个转位和弦，依次将<strong>每个组成音</strong>升八度即可推算出转位和弦。</p><h3 id="分割和弦"><a href="#分割和弦" class="headerlink" title="分割和弦"></a>分割和弦</h3><p>分割和弦与转位和弦类似，表示为 C / E 这种形式，不同的是转位和弦中包含的一定是和弦内的音，不管把根音换为三音还是五音，都只是通过升八度来转位，实际组成音未变。而复合和弦则不同，变换后的根音可以不属于原来和弦内的音。例如：Am / G：</p><img src="http://qiniu.yukicj.com/picGo/20201128142314.png" style="zoom:50%;" /><p>Am(7 1+ 3+)，和弦内不包括 5，因此 Am / G是将 G(5) 作为最低音，按住六弦的三品。 </p><h2 id="挂留和弦"><a href="#挂留和弦" class="headerlink" title="挂留和弦"></a>挂留和弦</h2><p>挂留和弦一般指用<strong>二度音或者纯四度音</strong>代替原来的三度音而排列组合成的和弦，换成了几级的音就称之为挂几，例如挂二和弦，挂四和弦，使和弦产生大调或小调特性的音符——三度音，用新的音符（二度音和四度音）替换掉了，或者说“挂留了”。</p><p>吉他和钢琴在演奏上和和弦的弹奏方式上还是有很大区别的，所以在吉他上的挂留和弦很多的情况 并不完全是将三音换掉，而是在大三和弦的三个组成音的基础上加入2音或者4音，从而将一个大三和弦变成挂四和弦或者挂二和弦。</p><p>挂留和弦多用于流行音乐，流行音乐和弦理论基于传统。SUS4一般指将传统三和弦中的三音替换为纯四度。这样的四度音具有有向三音进行的倾向，这种流动性在某种程度上与传统音乐理论中的和弦外音之(延)留音的解决并无二致。而（延）<strong>留</strong>音的英文为”suspension”。suspend又有“悬<strong>挂</strong>”之意。（再如音乐理论中的术语 Suspended tonality被译为“<strong>悬置</strong>调性”）故对于<strong>挂留</strong>和弦，“<strong>挂”字</strong>多源于字面翻译，同时可能意指该和弦的解决倾向带来的悬而未决的期待感；“<strong>留</strong>”字或许暗示了该四度音与传统和声外音中的延留音的同源关系。</p><p>比如C和弦，<a href="https://baike.baidu.com/item/%E5%92%8C%E5%BC%A6%E9%9F%B3">和弦音</a>是C、E、G，那么 F 相对于 C 来说是一个4级的音，所以如果在弹的时候弹了C、F、G，那么这个和弦就叫 C 挂四和弦，记为 Csus4。</p><p>sus 2： 挂留，把和弦的三度音用<strong>二度音</strong>代替。</p><p>Csus 2：（1 3 5 ）=》（1 2 5）</p><img src="http://qiniu.yukicj.com/picGo/20201128132211.png" style="zoom:50%;" /><p>同理：</p><p>sus 4： 挂留，把和弦的三度音用<strong>四度音</strong>代替</p><p>Csus 4：（1 3 5 ）=》 （1 4 5）</p><img src="http://qiniu.yukicj.com/picGo/20201128132236.png" style="zoom:50%;" /><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>所谓的挂留和弦就是把和弦中的某一个音挂起来了，形成一种小小的紧张感，而这种紧张感是需要在最后解决掉的，所以，在使用挂留和弦时，最后一定要将和弦解决到三和弦这种稳定和弦上去，这样听起来才会和谐一点，</p><p>这种和弦本身就可以形成某种艺术氛围。一般会用在某一个小段落的结尾和过渡出，一般出现在某一个调的五级或者一级的和弦上，以此来给曲子增加色彩。</p><p>比如挂二和弦，它用二度音代替了原来的三度音，从而形成了一种带有怀旧情绪的新和弦。在我国一些校园民谣，比如曾经广为传唱的校园民谣《同桌的你》就采用了挂二和弦，来表达怀旧情绪。</p><p>比如我们常听的beyond的《不再犹豫》这首曲子，在节奏上如果大家仔细听一下，在前奏快结束的最后一个D和弦上，就用到了挂Dsus4和弦。如果你仔细感受一下，就会发现，加上这个和弦之后，给这一段的色彩提升了很多。<strong>比直接扫两小节的D和弦</strong>要好听得多。</p><p>挂留和弦的用法上，我们可以在正常的终止的位置加入挂留和弦，相较于全程的大小三和弦弹下来，挂留和弦既可以给伴奏增加色彩，还不至于像七和弦九和弦这种和弦的色彩这么强烈，可以缓和乐曲中的和声节奏，成为一个出色的小“波折”。</p><p>这种和弦运用得当可以产生独特的艺术魅力，但如果滥用则可能对音乐作品的情绪产生破坏作用。</p><p>这种和弦本身有不稳定音的存在因此，挂留和弦一般需要解决到稳定音级和弦上。</p><h2 id="和弦倾向性"><a href="#和弦倾向性" class="headerlink" title="和弦倾向性"></a>和弦倾向性</h2><p>和弦倾向性表现在编曲和扒曲上。通过和弦倾向性可以根据歌曲中的某一个和弦推算出下一个和弦</p><p>所有调的属和弦（每个调的五级和弦）都倾向于这个调的主和弦。比如 C调的 G 和弦倾向于 C 和弦，也就是 G 和弦后接 C 和弦有种结束的感觉。推算方法：知道了属和弦，往后推 4 个音就是主音，例如 G 和弦作为属和弦，往后推 4 个音为 C，因此主和弦为 C 和弦，也就得到了这首歌的调是 C 调。</p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乐理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客(二) 主题配置</title>
      <link href="2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%BA%8C)%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录个人的 butterfly 主题配置，参考文档：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 官网文档</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>(1) 在博客根目录下下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>升級方法：在主题目录下，运行<code>git pull</code></p><p>(2) 配置主题</p><p>修改博客根目录下<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme:  butterfly</span><br></pre></td></tr></table></figure><p>(3) 安装插件</p><p>如果没有 pug 以及 stylus 的渲染器，下载安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>(4) 升级建议</p><p>把主题文件夹中的<code>_config.yml</code>复制到 Hexo 根目录里，同时重新命名为<code>_config.butterfly.yml</code>。以后只需要在<code>_config.butterfly.yml</code>进行配置就行。</p><p>Hexo 会自动<strong>合并</strong>主题中的<code>_config.yml</code>和<code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p><h2 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h2><h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><p>(1) 安装 hexo-generator-search：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>(2) 修改博客根目录下配置文件<code>_config.xml</code>，在最下面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p>(3) 如果按照上述步骤，则修改<code>_config.butterfly.xml</code>下开启本地搜索功能，否则直接修改主题下的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="添加点击特效"><a href="#添加点击特效" class="headerlink" title="添加点击特效"></a>添加点击特效</h3><p>修改<code>_config.butterfly.xml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span><br><span class="line">fireworks:</span><br><span class="line">  enable: true</span><br><span class="line">  zIndex: 9999 # -1 or 9999</span><br><span class="line">  mobile: false</span><br></pre></td></tr></table></figure><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>主页背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: &quot;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&quot;</span><br></pre></td></tr></table></figure><p>分类、标签、归档页顶部背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># If the banner of page not setting, it will show the top_img</span><br><span class="line">default_top_img: &#x2F;img&#x2F;guitar.jpg</span><br><span class="line"></span><br><span class="line"># The banner image of archive page</span><br><span class="line">archive_img: &#x2F;img&#x2F;guitar.jpg</span><br><span class="line"></span><br><span class="line"># If the banner of tag page not setting, it will show the top_img</span><br><span class="line"># note: tag page, not tags page (子標籤頁面的 top_img)</span><br><span class="line">tag_img: &#x2F;img&#x2F;sierra.jpg</span><br><span class="line"></span><br><span class="line"># The banner image of tag page</span><br><span class="line"># format:</span><br><span class="line">#  - tag name: xxxxx</span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"># If the banner of category page not setting, it will show the top_img</span><br><span class="line"># note: category page, not categories page (子分類頁面的 top_img)</span><br><span class="line">category_img: &#x2F;img&#x2F;guitar.jpg</span><br><span class="line"></span><br><span class="line"># The banner image of category page</span><br><span class="line"># format:</span><br><span class="line">#  - category name: xxxxx</span><br><span class="line">category_per_img:</span><br></pre></td></tr></table></figure><h3 id="文章封面图"><a href="#文章封面图" class="headerlink" title="文章封面图"></a>文章封面图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否顯示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left&#x2F;right&#x2F;both</span><br><span class="line">  position: both</span><br><span class="line">  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span><br><span class="line">  default_cover:</span><br><span class="line">    - https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jerryc127&#x2F;CDN@latest&#x2F;cover&#x2F;default_bg.png</span><br><span class="line">    - http:&#x2F;&#x2F;qjd3t88bg.hn-bkt.clouddn.com&#x2F;image&#x2F;blog_default_bg.png</span><br></pre></td></tr></table></figure><p>文章内设置封面图<code>cover</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: Babel6</span><br><span class="line">date: 2017-08-02 14:20:32</span><br><span class="line">categories: </span><br><span class="line">     - 前端</span><br><span class="line">tags:</span><br><span class="line">     - babel</span><br><span class="line">     - es6</span><br><span class="line">cover: http:&#x2F;&#x2F;qjd3t88bg.hn-bkt.clouddn.com&#x2F;picGo&#x2F;20201106162605.jpg </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客(三) 博客图片</title>
      <link href="2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%B8%89)%20%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/"/>
      <url>2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%B8%89)%20%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>我们在写博客的时候，往往会需要选择一张合适的图片作为文章封面，此外文章内也会有很多图片说明，这些图片可以上传到阿里云、七牛云上存储，生成相应的链接，然后引用到文章中。本文主要介绍这个过程中常用的处理方式，包括图片的压缩、图片的存储、图片的上传三部分。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>在找图片作为文章封面时，想到可以用一些好看的桌面背景图片作为封面，但是这些图片尺寸很大，而且大小不一，如果能在上传到云存储之前进行压缩，并且调整尺寸为合适大小的图片，就可以减少存储的成本，同时也更美观。</p><p>因此找到了一个命令行工具<code>img-compress</code> ，它可以压缩图片，看了作者实现的源码，主要调用的是一个在线图片压缩网站 <a href="https://tinify.cn/">TinyPNG</a> 提供的 API。看完官网提供的 API 后感觉作者实现的功能比较单一，只能进行简单的图片压缩，而官网 API 包含的功能有很多：</p><ul><li>压缩图片</li><li>下载网站图片并压缩</li><li>多种模式裁切图片</li></ul><p>因此我写了一个命令行工具 tinys，主要实现了自己想到的常用的几个功能：</p><ul><li><p>压缩单张图片到指定目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinys ./logo.png ./bg.png</span><br></pre></td></tr></table></figure></li><li><p>压缩一个文件夹内的所有图片到指定目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinys ./bg ./tinys</span><br></pre></td></tr></table></figure></li><li><p>根据给定的多个 url 链接，下载并压缩这些 web 图片</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinys url http://www.image.com/<span class="number">123</span>.png http://www.image.com/<span class="number">234</span>.png</span><br></pre></td></tr></table></figure></li><li><p>裁剪图片，可指定图片大小进行裁剪压缩</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tinys ./logo.png ./bg.png <span class="literal">-m</span> fit <span class="literal">-w</span> <span class="number">1000</span> <span class="literal">-h</span> <span class="number">1000</span> </span><br></pre></td></tr></table></figure></li></ul><p>下载方法：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install tinys <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>具体使用方法可查看 markdown 文档，或者使用<code>tinys -h</code>查看。Github 地址：<a href="https://github.com/hg2990656/tinys">tinys</a></p><h2 id="图片存储"><a href="#图片存储" class="headerlink" title="图片存储"></a>图片存储</h2><p>图床的选择较多，例如：SM.MS、腾讯云<code>COS</code>、微博图床、Github 图床、七牛图床、阿里云 OSS 图床、又拍云、Imgur 图床。其中有一些是免费的，但是不能自己管理，需要备份好，例如微博图床，如果考虑图片的安全和备份可考虑使用腾讯、阿里的对象存储，目前应该都是按流量计费，而七牛云提供了免费 10 G 的存储空间，是个不错的选择。</p><p>七牛云注册账号，新建一个空间后会提供一个测试域名，可以通过这个测试域名访问到我们的存储图片，也就是我们使用图片时的地址，但是这个域名只有30天的时间，因此最好购买一个自己的域名，备案后才可以绑定到七牛云访问图片。</p><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>各大图床都提供了相应的上传接口，因此也有很多工具可以帮助我们快速上传图片到图床，得到存储的图片地址，直接可以粘贴到文章内即可，mac 下推荐两款软件：</p><ul><li>iPic，免费版只提供微博图床，但不能管理图片，付费后开放多种图床上传功能。</li><li><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>，免费，且window下也可使用，提供各种图床上传，使用体验很棒。</li></ul><h3 id="PicGo-使用"><a href="#PicGo-使用" class="headerlink" title="PicGo 使用"></a>PicGo 使用</h3><p>配置七牛图床时依次配置自己七牛账户的<code>AccessKey</code>、<code>SecretKey</code>、存储空间名称、访问网址、存储区域、存储路径。</p><p>其中访问网址即为测试域名或者自己绑定后的域名，确认存储区域对应自己七牛云的区域，如果没有选项需要输入值，直接输入区域名称是不行的，需要输入对应的代码。华东 z0, 华北 z1，华南 z2，北美 na0，东南亚 as0。</p><p>配置完成后，可在上传区选择默认图床为七牛云以及返回的链接格式，例如：选择markdown，则上传后会直接返回<code>![](url)</code>的链接，可直接复制到 markdown 中使用。</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p>结合上述工具使用，在博客文章中使用图片的流程如下：</p><p>1.找到合适的图片存到本地或者喜欢的网站图片</p><p>2.使用 tinys 压缩本地图片或者网页图片</p><p>3.使用 PicGo 一键上传到云存储得到返回的地址</p><p>4.将返回到图片地址作为图片封面地址或者文章内引用图片地址使用</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 博客(一) 博客搭建</title>
      <link href="2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%B8%80)%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2020/11/13/hexo%20%E5%8D%9A%E5%AE%A2(%E4%B8%80)%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>使用<code>hexo</code>和<code>Github Pages</code>搭建个人博客网站，<code>Github Pages</code>是<code>Github</code>提供的免费的静态站点，其特点：免费托管、自带主题、支持自制页面等。相当于将自己的博客搭建在<code>Github</code>的服务器上，无需自己购买服务器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>1.安装 Node、Git和 hexo</strong></p><ul><li><p>直接去官网下载安装 <a href="https://nodejs.org/zh-cn/">Node</a> 和 <a href="https://git-scm.com/downloads">Git</a>，配置 Git 的 ssh。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;你的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure><p>邮箱地址为<code>github</code>的绑定邮箱，会生成<code>.ssh</code>文件夹，windows 在 C 盘下，复制<code>id_rsa.pub</code>的内容粘贴到<code>github</code>的<code>ssh key</code>里面。</p></li><li><p>安装 Node 后即可使用 npm，使用<code>npm</code>安装<code>hexo</code>的脚手架<code>hexo-cli</code>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2.Github pages</strong></p><ul><li><p>新建一个 github 仓库，命名格式为：<code>[your user name].github.io</code>，例如：<code>hg2990656.github.io</code>，则生成的 Github page 的网址为 <code>http://hg2990656.github.io</code>，即博客的网址。</p><p>仓库名最好和自己的 github 用户名一致，如果仓库名取做其他名字，例如：<strong>blog</strong>，则 Github pages 发布的地址为<code>http://hg2990656.github.io/blog</code>，在后续配置 hexo 主题时<strong>会出现因为根目录的配置原因导致css 样式加载不出来的问题</strong>。</p></li><li><p>建立仓库后进入设置，在下面的 <strong>Github Pages</strong> 中选择<code>choose theme</code>，随意选择一个 github page 的主题即可，会生成一个博客网站，并且显示<code>Your site is published at http://...</code>。</p></li></ul><h2 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h2><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>(1) 初始化项目，新建一个博客目录：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo init blog</span><br></pre></td></tr></table></figure><p>(2) 安装依赖：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> npm install</span><br></pre></td></tr></table></figure><p>(3) 查看效果，在本地启动服务可查看实际的部署效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo server // 或者 hexo s</span><br></pre></td></tr></table></figure><p>默认运行在 <strong>4000</strong> 端口，windows下如果安装了福晰阅读器，<strong>4000</strong> 端口可能会被占用，使用<code>hexo s -p 5000</code>换端口运行。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>以<code>yilia</code>主题为例说明：</p><p>(1) <code>blog</code>目录下，下载主题：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git clone https://github.com/litten/hexo<span class="literal">-theme</span><span class="literal">-yilia</span>.git themes/yilia</span><br></pre></td></tr></table></figure><p>将<code>yilia</code>主题下载到<strong>themes</strong>下，可看到有一个默认主题是<code>lanscape</code>。</p><p>(2) 主题配置</p><ul><li><p>配置<code>hexo</code>根目录下的<code>_config.yml</code>文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></li><li><p>将头像图片放到<code>themes/yilia/source</code>下面，配置<code>yilia</code>文件夹下的<code>_config.yml</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /avatar.jpg</span><br></pre></td></tr></table></figure></li><li><p>如果在第二步建立仓库时，取名为<strong>blog</strong>，则还需要更换里面的<code>root: /blog</code>(默认是<code>‘/’</code>)，否则头像无法加载</p></li></ul><p>(3) Github 配置</p><p>配置<code>blog</code>目录下的<code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:hg2990656/hg2990656.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>repo 采用 ssh 链接，之前需要配好<code>ssh key</code>，或者采用 https：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/hg2990656/hg2990656.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="博客发布"><a href="#博客发布" class="headerlink" title="博客发布"></a>博客发布</h3><p>发布的<code>markdown</code>在<code>blog</code>目录的<code>source/_post</code>内，可直接删除或添加<code>.md</code>文件再部署，即可实现博客文章的删除和新增。之后每次部署博客文章到 Github 前，执行三个步骤：</p><p>(1) 清除旧文件，删除生成的静态文件<code>db.json</code>和<code>public</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo clean</span><br></pre></td></tr></table></figure><p>(2) 生成新的静态文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo generate // hexo g</span><br></pre></td></tr></table></figure><p>(3) 部署到 Github：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> hexo deploy // hexo d</span><br></pre></td></tr></table></figure><p>然后就可以通过<code>github pages</code>的网址访问到<code>hexo</code>博客，它会把之前选择主题生成的页面替换掉。</p><p>注：最新版本的<code>hexo-cli</code>在安装依赖时已经添加了<code>hexo-server</code>和<code>hexo-deployer-git</code>，若提示报错，可能是老版本的原因，需要自己安装依赖：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install hexo<span class="literal">-server</span> -<span class="literal">-save</span></span><br><span class="line"><span class="variable">$</span> npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p><code>hexo</code>成功部署后可通过<code>Github pages</code>发布的网址访问博客，如果自己有一个域名，可以配置域名解析，域名无需备案，因为服务器是<code>Github</code>的服务器，不在内地，域名解析到香港和国外服务器都不需要备案。</p><p>(1) 进入自己购买的域名服务控制台，新建一个<code>CNAME</code>解析，地址填自己<code>Github pages</code>发布的网址，例如：<code>hg2990656.github.io</code>。</p><p>(2) 有两种方式配置<code>Github pages</code>的域名绑定：</p><ul><li>方式一：进入 Github 博客仓库的设置，找到 <strong>GitHub Pages</strong> 的<code>Custom domain</code>，直接输入域名并保存，即可绑定域名，可以发现仓库的文件多了一个文件<code>CNAME</code>，里面就是填入的域名地址。</li><li>方式二：本地<code>blog</code>的文件夹<code>source</code>下面，新建文件<code>CNAME</code>，<strong>没有后缀</strong>，编辑输入要绑定的域名如<code>www.xyz.com</code>，与域名解析的地址一致，之后重新部署到服务器，会自动会绑定之前的网址到这个新域名上，通过新域名即可访问。</li></ul><p>注：使用方式一时，仍然需要先在本地<code>blog</code>目录下的<code>source</code>内新建<code>CNAME</code>文件并填入域名，之后才能部署发布文章，否则会重置<code>Github</code>博客仓库设置中配置的域名。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 仓库收藏</title>
      <link href="2020/11/12/Github%E4%BB%93%E5%BA%93%E6%94%B6%E8%97%8F/"/>
      <url>2020/11/12/Github%E4%BB%93%E5%BA%93%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>记录个人收藏的一些 Github 仓库，包括各种软件工具、实战项目、学习教程、框架源码等。持续更新中……</p><h2 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h2><p><a href="https://github.com/iawia002/annie">annie</a>：视频下载</p><p><a href="https://github.com/soimort/you-get">you-get</a>：视频、音频、图片下载</p><p><a href="https://github.com/xiebruce/PicUploader">PicUploader</a>：图床上传</p><p><a href="https://github.com/proxyee-down-org/proxyee-down">proxy-down</a>：http下载工具，基于http代理，支持多连接分块下载</p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>：图床上传</p><p><a href="https://github.com/yangshun1029/aria2gui">aria2gui</a>：mac上的 aria2 图形化下载软件</p><p><a href="https://github.com/ziggear/shadowsocks">SS</a>：科学冲浪</p><p><a href="https://github.com/jiahaog/nativefier/">nativefier</a>：web页面转桌面应用软件</p><p><a href="https://github.com/forks-library/Octotree-Pro">Octotree-Pro</a>：Github代码侧边栏免费版</p><h2 id="学习教程"><a href="#学习教程" class="headerlink" title="学习教程"></a>学习教程</h2><p><a href="https://github.com/forks-library/vim-galore-zh_cn">Vim 从入门到放弃</a></p><p><a href="https://github.com/labuladong/fucking-algorithm">算法框架</a></p><p><a href="https://github.com/jackfrued/Python-100-Days">Python-100-Days</a></p><h2 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h2><p><a href="https://github.com/Tencent/omi">Omi</a>：腾讯前端跨框架跨平台框架</p><p><a href="https://github.com/nodejs/node-v0.x-archive/blob/master/lib/module.js">Node</a>：Node 源码</p><p><a href="https://github.com/alibaba/malagu">Malagu</a>：阿里 serverless 框架</p><h2 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h2><p><a href="https://github.com/boenfu/vuex-along">vuex-along</a>：持久化存储 state 的 vuex 扩展</p><p><a href="https://github.com/NextBoy/vue-quill-editor-upload">vue-quill-editor-upload</a>：富文本编辑器vue-quill-editor的辅助插件，用于上传图片到你的服务器</p><p><a href="https://github.com/websanova/wPaint">wPaint</a>：jQuery绘图工具</p><p><a href="https://github.com/Akryum/vue-virtual-scroller">vue-virtual-scroller</a>：vue scroll库</p><h2 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目"></a>实战项目</h2><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><a href="https://github.com/KuangPF/mpvue-weui">mpvue</a>：用 vue 写小程序，基于 mpvue 框架重写 weui</p><p><a href="https://github.com/SimonZhangITer/DataVisualization">DataVisualization</a>：数据可视化项目</p><p><a href="https://github.com/lin-xin/vue-manage-system">vue-manage-system</a>：基于vue + element的后台管理系统解决方案</p><p><a href="https://github.com/wwenj/tripRecord">tripRecord</a>：基于高德地图API，Vue+Express实现的移动端webapp</p><p><a href="https://github.com/Month7/uploadDemo">uploadDemo</a>：vue+express 断点续传 demo</p><p><a href="https://github.com/yeyan1996/file-upload">file-upload</a>：前端大文件上传 + 断点续传解决方案</p><p><a href="https://github.com/vuejs/vue-hackernews-2.0/">vue-hackernews-2.0</a>：服务器渲染，PWA、Service Worker</p><p><a href="https://github.com/zyl1314/vue-ssr-demo">vue-ssr-demo</a>：ssr 渲染 demo</p><p><a href="https://github.com/JaneSu/multiple-vue-page">multiple-vue-page</a>：vue 多页面应用</p><p><a href="https://github.com/xhl592576605/cnblog_vue">cnblog_vue</a>：vue 版的 WebApp 博客园移动端</p><p><a href="https://github.com/lentoo/vue-cli-ssr-example">vue-cli-ssr-example</a>：ssr 渲染 demo</p><p><a href="https://github.com/StriverF/vue-cli4-ssr">vue-cli4-ssr</a>：Vue-cli4 同构SSR项目，支持 PWA</p><p><a href="https://github.com/likaia/chat-system">chat-system</a>：在线聊天系统，最大程度的还原了Mac客户端QQ，Vue3+TypeScript作为项目主体架构</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p><a href="https://github.com/naihe138/GraphQL-demo">GraphQL-demo</a>：Koa + GraphQL + Apollo-Server</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="https://github.com/Smith-Cruise/Spring-Boot-Shiro">Spring-Boot-Shiro</a>：Shiro基于SpringBoot +JWT搭建简单的restful服务</p><p><a href="https://github.com/xuwujing/springBoot-study">springBoot-study</a>：SpringBoot学习的相关工程</p><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><p><a href="https://github.com/Chain-Zhang/ispider">ispider</a>：使用golang实现简单的爬虫</p><p><a href="https://github.com/EDDYCJY/go-gin-example">go-gin-example</a>：gin 框架使用 demo</p><h3 id="框架实现"><a href="#框架实现" class="headerlink" title="框架实现"></a>框架实现</h3><p><a href="https://github.com/XHFkindergarten/jerkpack">jerkpack</a>：类 webpack 打包，开发一款低配版的webpack。</p>]]></content>
      
      
      <categories>
          
          <category> 个人收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站搭建(二) 前后端分离项目部署</title>
      <link href="2019/11/14/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA(%E4%BA%8C)%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>2019/11/14/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA(%E4%BA%8C)%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍基于<code>vue-cli 4</code>脚手架搭建的 vue 前端 + Node 后台 + nginx 的前后端分离项目部署到服务器的流程。</p></blockquote><h2 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h2><p>确保自己的前后端项目能够正常的在本地运行，对于 vue-cli 3 版本以下创建的 vue 项目在配置上略有不同，主要区别在于脚手架生成 webpack 的配置文件不同。</p><p>(1) 对于 vue-cli3 以下创建的项目，修改项目的<code>config/index.js</code>，改动如下两处代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    <span class="comment">// Template for index.html</span></span><br><span class="line">    index: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Paths</span></span><br><span class="line">    assetsRoot: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,    <span class="comment">// 1.这里最初为&#x27;/&#x27;改为&#x27;./&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Source Maps</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,   <span class="comment">// 2.这里最初为 true 改为 false，不生成 map 文件</span></span><br><span class="line">    <span class="comment">// https://webpack.js.org/configuration/devtool/#production</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>(2) 对于 vue-cli3.x 及以上版本，没有了<code>config/index.js</code>目录，则需要在根目录下新建 <code>vue.config.js</code>文件，里面写下如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 修改接口</p><p>将自己的 axios 封装请求中的 url 格式改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> axios.request(&#123;</span><br><span class="line">   url: <span class="string">`/api<span class="subst">$&#123;options.url&#125;</span>`</span>,</span><br><span class="line">   method: options.method,</span><br><span class="line">   data: options.body,</span><br><span class="line">   params: options.params</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之所以添加<code>/api</code>是因为想在部署后台服务后通过<code>服务器ip:端口/api</code>的地址访问或调试后台的接口，因此前端需要作出相应的修改。 开发环境下配置的 webpack 中的 devServer 只适用于开发环境。</p><p>假设前端项目部署到 nginx 中<code>/usr/share/nginx/html</code>中的文件夹名称为<code>yuki</code>，则可以通过<code>服务器ip/yuki</code>访问前端项目，修改接口配置完成后前端访问后台的接口均为：<code>服务器ip/api/接口名称</code>，例如：<code>ip/api/login</code>。</p><h2 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h2><p>后台只需要像本地开发一样在服务器上启动服务，就可以通过<code>服务器ip:后台端口/接口名称</code>的地址请求或者访问后台接口，与上文前端接口配置一致，为了统一管理后台接口，可以为后台接口添加一个前缀<code>/api</code>。</p><p>以<code>express</code>框架为例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>, userRouter);</span><br></pre></td></tr></table></figure><p>在原本的代码基础上修改路由地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">&#x27;/api/user&#x27;</span>, userRouter);</span><br></pre></td></tr></table></figure><p>这样就可以通过<code>服务器ip：后台端口/api/user</code>访问<code>user</code>相关的接口</p><h2 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h2><h3 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h3><p>(1) 打包 vue 项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>生成<code>dist</code>文件夹，修改文件夹名称为<code>test</code>。</p><p>(2) 传输到服务器</p><p>通过 scp 命令传输到服务器上的<code>/usr/share/nginx/html</code>内：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> ./dist root<span class="selector-tag">@</span>服务器ip:/usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>这样就可以通过<code>服务器ip/test</code>访问到<code>test</code>中的<code>index.html</code>页面。</p><h3 id="后台部署"><a href="#后台部署" class="headerlink" title="后台部署"></a>后台部署</h3><p>(1) 直接将后台项目文件夹传输到服务器任意目录下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> server root<span class="selector-tag">@</span>服务器ip:/</span><br></pre></td></tr></table></figure><p>(2) 通过 pm2 启动，修改后台项目的<code>package.json</code>，增加<code>npm run pm2</code>的启动命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node ./bin/www&quot;,</span><br><span class="line">  &quot;pm2&quot;: &quot;pm2 start ./bin/www --name test&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>执行<code>npm run pm2</code>就可以启动后台服务，pm2 管理的名称为<code>test</code>，可以通过<code>pm2 list</code>查看所有启动的服务。</p><h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><p>经过上述配置和部署后，前端的接口地址格式为：<code>服务器ip/api/接口名称</code>，而访问后台的接口地址格式为：<code>服务器ip:后台端口/api/接口名称</code>，因此还需要配置 nginx 实现前后端请求的链接，将前端请求的地址中的<code>服务器ip/api</code>转换为<code>服务器ip:后台端口/api</code>即可。</p><p>修改 nginx 配置文件，增加一个 location 解析<code>/api</code>的请求，即<code>服务器ip/api</code>的请求，通过配置<code>proxy_pass</code>为后台地址，则相当于将服务器 80 端口接收的<code>服务器ip/api</code>的请求交由<code>服务器后台地址/api</code>处理。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    proxy_pass http://localhost:3000;</span><br><span class="line">    proxy_set_header  Host  $host;</span><br><span class="line">    proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样前端接口请求时访问<code>服务器ip/api </code>时就相当于请求后台<code>http://localhost:3000/api</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 网站 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站搭建(一) 域名和服务器</title>
      <link href="2019/11/14/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA(%E4%B8%80)%20%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2019/11/14/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA(%E4%B8%80)%20%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍网站搭建前的预备工作，包括购买域名和服务器，以及安装服务器常用软件。</p></blockquote><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者，其实质还是通过 DNS 域名系统进行解析找到对应的 ip 地址再进行数据的传输。因此如果网站只是用于自己的学习或者个人访问，域名也不是必须的。</p><h3 id="域名使用场景"><a href="#域名使用场景" class="headerlink" title="域名使用场景"></a>域名使用场景</h3><p>总结了域名在平时学习开发过程中会用到的场景：</p><p>(1) 博客图片地址</p><p>写博客或者文章时，图片的最好存储方式是存储到图床，例如：七牛云，但是七牛云只提供 30 天的测试域名，如果想要长期稳定的使用，仍然需要购买一个自己的域名。</p><p>(2) 微信开发</p><p>学习开发微信公众号时，配置接口时必须提供一个域名，此外开发还需要用到内网穿透，将自己本地的服务通过 80 端口暴露出去，因此域名是必备条件。</p><p>(3) 网站搭建</p><p>购买服务器并搭建网站后可以通过 ip 地址访问，但是如果想让更多人访问时，最好使用域名访问。</p><p>(4) 博客地址</p><p>如果通过 hexo + Github pages 搭建自己的博客，可以替换 Github pages 的域名，配置一个 CNAME 解析，方便用户访问。</p><h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>域名可以直接在阿里云、腾讯云、百度云上购买，最主要的就是考虑要购买的域名后缀，建议购买 .com和 .cn 的域名，价格相对更贵一点，如果购买其他过于冷门的域名后缀，在域名备案时可能会有影响。</p><p>需要注意的是域名购买后需要认证才能解析。</p><h3 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h3><p>域名备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。但是有一种情况例外，如果域名解析的是香港服务器或者国外的服务器则无需备案，但是这些服务器相对比较贵。因此如果想要域名解析到内地的服务器则一定要备案。</p><p>按照工信部2017年域名实名认证的要求，域名注册机构阿里云万网、新网、西部数码等都接到域名注册注册管理局的通知：2017年9月1日起，未完成实名认证的域名，注册局将陆续暂停解析，届时相关网站、邮箱或网络应用将无法访问，同时也不能进行新增&amp;修改解析、DNS修改及其他相关等操作；待实名认证通过后方可恢复正常。在中国，目前需要实名认证后才能使用的域名后缀包括：</p><p>.com/.net /.top/.xyz/.vip /.club/.shop/.wang/.ren /.site /.我爱你/.集团/.biz/.red/.kim/.pro/.info/.mobi/.ltd/.group/.link</p><p>如果你不想认证，注册即用，一是注册时避开以上域名后缀，二是用国外注册商的域名注册接口注册。</p><p>在国内不需要实名认证的域名后缀有：</p><p>.cc/.co/.win/.la/.us/.im/.in/.pw/.tm/.gs/.gg/.cx等。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>购买服务器同样可以选择阿里云或者腾讯云，在双十一活动时价格很优惠，平均每年90元左右，以阿里云 CenOS 8 服务器为例进行说明：</p><h3 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h3><p>可以在云服务器 ECS 面板的<code>实例与镜像</code>-&gt;<code>实例</code>中查看自己的服务器。如果没有看到，可能是左上角的地区选择和你购买的服务器区域不一致。</p><p>初始密码是未知的，需要重置密码，点开服务器操作中的<code>更多</code>-&gt;<code>密码</code>-&gt;<code>重置实例密码</code>，按照要求重置密码即可。</p><h3 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h3><p>在后续将前后端项目部署到服务器后，后台项目可能会需要启动占用 8080、3000 这些端口，但是通过浏览器 ip + 端口访问后台时会发现无法访问，因为需要设置服务器的安全组，允许这些端口被访问。</p><p>点开服务器操作中的<code>更多</code> -&gt; <code>网络和安全组</code> -&gt; <code>安全组配置</code> ，会看到一个安全组列表中有一个默认的<code>普通安全组</code>，点开<code>配置规则</code>可以看到几个已经开放的端口，只需点击<code>手动添加</code>按照规则配置自己想要开放的端口即可。</p><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>服务器初始的用户名很长，先更换一个自己的用户名：<code>hostnamectl set-hostname host.example.com</code></p><h4 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h4><p>在 Linux 系统中设置 SSH 免密登录，需要生成公共身份验证密钥并将其附加到远程主机<code>/.ssh/authorized_keys</code>文件，配置 SSH 免密登录的步骤如下：</p><p>1）检查现有的 SSH 密钥对</p><p>在生成新的 SSH 密钥对之前，首先检查主机上是否已有 SSH 密钥，主要是为了不覆盖现有密钥。运行以下 Is 命令以查看是否存在现有 SSH 密钥：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="literal">-al</span> ~/.ssh/id_*.pub</span><br></pre></td></tr></table></figure><p>如果存在现有密钥，可以使用这些密钥并<strong>跳过下一步</strong>，或备份旧密钥并生成新密钥。如果看到<code>No such file or directory</code>或<code>no matches found</code>意味着没有 SSH 密钥，则可以继续执行下一步并生成新密钥。</p><p>2）生成新的 SSH 密钥对</p><p>以下命令将生成一个新的 4096 位 SSH 密钥对，并将电子邮件地址作为注释：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-b</span> <span class="number">4096</span> <span class="literal">-C</span> Email</span><br></pre></td></tr></table></figure><p>按 Enter 接受则默认文件位置和文件名：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> which to save the key（/home/yourusername/.ssh/id_rsa）：</span><br></pre></td></tr></table></figure><p>接下来，ssh-keygen 工具将要求键入安全密码，无论是否想要使用密码短语都可以，如果选择使用密码短语，将获得额外的安全保护。在大多数情况下，开发人员和系统管理员使用 SSH 而不使用密码，因为它们对完全自动化的流程很有用。如果不想使用密码短语，请按 Enter：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase（empty <span class="keyword">for</span> no passphrase）：</span><br></pre></td></tr></table></figure><p>可在<code>~/.ssh</code>目录下查看密钥，其中公共密钥为<code>id_rsa.pub</code></p><p>3）复制公钥</p><p>现在已经生成了 SSH 密钥对，为了能够在没有密码的情况下登录到主机，需要将公钥复制到要管理的主机。将公钥复制到主机的最简单方法是使用名为的命令 ssh-copy-id 。在本地主机终端类型：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-copy</span><span class="literal">-id</span> remote_username@server_ip_address</span><br></pre></td></tr></table></figure><p>系统将提示输入 remote_username 的密码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote_username@server_ip_address<span class="string">&#x27;s password:</span></span><br></pre></td></tr></table></figure><p>用户通过身份验证后，公钥将附加到远程用户<code>authorized_keys</code>文件，并且将关闭连接。如果由于某种原因， ssh-copy-id 本地主机上没有该实用程序，则可以使用以下命令复制公钥：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_address <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><p>4）使用 SSH 密钥登录</p><p>完成上述步骤后，就能够登录到远程主机而不会被提示输入密码，测试口令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh remote_username@server_ip_address</span><br></pre></td></tr></table></figure><h4 id="配置连接心跳"><a href="#配置连接心跳" class="headerlink" title="配置连接心跳"></a>配置连接心跳</h4><p>在使用终端软件 用 ssh 连接服务器时可能会遇到长时间不操作就会卡死的情况，卡死是因为 LIUNX 安全设置问题，在一段时间内没有使用数据的情况下会自动断开，解决方法就是让本地或者服务器隔一段时间发送一个请求给对方即可。</p><p>在本地打开配置文件（不建议在server端设置）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>在最下方添加以下参数，如果有直接修改：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerAliveInterval <span class="number">50</span> <span class="comment"># 每隔50秒就向服务器发送一个请求</span></span><br><span class="line">ServerAliveCountMax <span class="number">3</span>  <span class="comment"># 允许超时的次数，一般都会响应</span></span><br></pre></td></tr></table></figure><p>修改完之后重启一下 ssh 服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h4 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h4><p>如果购买的是阿里云的服务器会发现 yum 的下载源已经配置为阿里云的源，无需自己配置，因此下载速度还可以。</p><h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="literal">-y</span> git</span><br></pre></td></tr></table></figure><h5 id="Node-和-npm"><a href="#Node-和-npm" class="headerlink" title="Node 和 npm"></a>Node 和 npm</h5><p>在<a href="https://github.com/nodesource/distributions">官方</a>查看有哪些版本，查找自己想要的 nodejs 源，先安装源：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="literal">-sL</span> https://rpm.nodesource.com/setup_14.x | bash -</span><br></pre></td></tr></table></figure><p>然后安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install nodejs</span><br></pre></td></tr></table></figure><p>通过：node -v 和npm -v 查看版本，说明安装成功</p><p><strong>替换为淘宝NPM镜像</strong></p><p>首先我们可以查看原本的镜像地址：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br><span class="line">https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>然后替换成淘宝的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>如果想恢复原来的镜像地址：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>如果用淘宝定制的 cnpm 工具来代替默认的npm：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm -<span class="literal">-registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h5 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h5><p>目前安装 Mysql 不像以前麻烦了，一个命令就搞定，使用最新的包管理器安装MySQL：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install @mysql</span><br></pre></td></tr></table></figure><p>安装完成后，运行以下命令来启动MySQL服务并使它在启动时自动启动：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable -<span class="literal">-now</span> mysqld</span><br></pre></td></tr></table></figure><p>要检查MySQL服务器是否正在运行，请输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure><p>运行<code>mysql_secure_installation</code>脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>要求你配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置<ul><li>选择密码验证策略等级， 我这里选择0 （low），回车</li><li>输入新密码两次</li><li>确认是否继续使用提供的密码？输入y ，回车</li><li>移除匿名用户？ 输入y ，回车</li><li>不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车</li></ul></li></ol><p>2.移除test数据库？ 输入y ，回车</p><p>3.重新载入权限表？ 输入y ，回车</p><p><strong>参考链接</strong>：<a href="https://www.cnblogs.com/kasnti/p/11929030.html">CentOS 8 安装MySQL 8.0</a></p><h5 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h5><p>pm2 是一个带有负载均衡功能的 Node 应用的进程管理器，当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> pm2</span><br></pre></td></tr></table></figure><h5 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h5><p>安装工具：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum<span class="literal">-utils</span></span><br></pre></td></tr></table></figure><p>创建 nginx 镜像仓库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><p>粘贴内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">nginx-stable</span>]</span><br><span class="line"><span class="string">name=nginx</span> <span class="string">stable</span> <span class="string">repo</span></span><br><span class="line"><span class="string">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class="line"><span class="string">module_hotfixes=true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">nginx-mainline</span>]</span><br><span class="line"><span class="string">name=nginx</span> <span class="string">mainline</span> <span class="string">repo</span></span><br><span class="line"><span class="string">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">enabled=0</span></span><br><span class="line"><span class="string">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class="line"><span class="string">module_hotfixes=true</span></span><br></pre></td></tr></table></figure><p>安装 nginx：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>其他命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx // 加入开机启动</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">start</span> nginx // 启动 nginx</span><br><span class="line"></span><br><span class="line">systemctl restart nginx // 重启 nginx</span><br><span class="line"></span><br><span class="line">systemctl stop nginx // 关闭 nginx</span><br><span class="line"></span><br><span class="line">systemctl status nginx // 查看 nginx 的状态</span><br></pre></td></tr></table></figure><p>启动后 nginx 服务的默认端口为 80，因此可直接在浏览器通过服务器 ip 地址访问，出现欢迎页面即可。</p><p><strong>配置文件</strong></p><p>nginx 服务的默认配置文件在<code>vim /etc/nginx/conf.d/default.conf</code>，打开可看到，默认端口为 80，项目部署目录为<code>/usr/share/nginx/html</code>。而访问 nginx 的欢迎页面就是<code>html</code>内的<code>index.html</code>文件。</p><p>因此在<code> /usr/share/nginx/html/</code>目录下上传一个文件夹<code>yuki</code>，内部新建一个<code>index.html</code>，则可以通过<code>服务器 ip/yuki</code>访问到<code>yuki</code>下的<code>index.html</code>页面。</p><p>如果在与<code>html</code>同级的目录下新建一个文件夹<code>test</code>，然后想通过<code>服务器ip/test</code>访问，则需要增加配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">   <span class="string">root</span>   <span class="string">/usr/share/nginx/html;</span></span><br><span class="line">   <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">新增配置</span></span><br><span class="line"><span class="string">location</span> <span class="string">/test/</span> &#123;</span><br><span class="line">   <span class="string">alias</span> <span class="string">/usr/share/nginx/test/;</span></span><br><span class="line">   <span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是不能使用 root，要使用 alias，其区别在于：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/file/</span> &#123;</span><br><span class="line">    <span class="string">alias</span> <span class="string">/var/html/file;</span> <span class="comment"># 这个查找文件的路径直接是/var/html/file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">location</span> <span class="string">/file/</span> &#123;</span><br><span class="line">    <span class="string">root</span> <span class="string">/var/html/file;</span> <span class="comment"># 这个查找文件的路径应该是/var/html/file/file</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 网站 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Babel6</title>
      <link href="2017/08/02/babel%206/"/>
      <url>2017/08/02/babel%206/</url>
      
        <content type="html"><![CDATA[<h2 id="babel-6和babel-5的区别"><a href="#babel-6和babel-5的区别" class="headerlink" title="babel 6和babel 5的区别"></a>babel 6和babel 5的区别</h2><p><a href="http://jamesknelson.com/the-six-things-you-need-to-know-about-babel-6/">&gt;The Six Things You Need To Know About Babel 6</a></p><p>（1）babel升级到babel6后，将命令行工具和API分开了，npm的babel包已经不存在，<strong>不需要单独去安装</strong><code>babel</code>，babel被分割为<br><code>babel-cli</code>：包含babel命令行接口，终端编译es6<br><code>babel-core</code>：包含Node API和<code>require hook</code>(替换原先的require)<br><code>babel-ployfill</code>：建立一个完整的es6环境</p><p>（2）每一个单独的转换都是一个插件，包括es2015和JSX，想使用ES6语法，需要手动加载相关插件，比如：<code>babel-preset-es2015</code>和<code>babel-preset-react</code></p><p>（3）babel6增加了<strong>预设转码</strong><code>presets</code>和<strong>插件</strong><code>plugins</code>的集合，提供了两个<code>presets</code>满足在babel5中默认实现的功能</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-preset</span><span class="literal">-es2015</span> babel<span class="literal">-preset</span><span class="literal">-react</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br></pre></td></tr></table></figure><p>安装后需要配置<code>.babelrc</code>告诉babel去使用它</p><p>（4）<code>.babelrc</code>是需要的，babel6不再像babel5默认使用ES2015和React转换，安装两个插件后需要配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>, <span class="string">&quot;react&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）Stage 0 是一个分离的preset，而不是一个选项。<br>babel5中可以通过传递<code>--stage 0</code>给babel来使用ES7的特性比如说<code>decorators</code>和<code>async/await</code> 。现在必须安装并加载<code>babel-preset-stage-0</code></p><p>（6）<code>--external-helpers</code>选项现在是一个插件<br>为了避免重复地引用babel的帮助函数，你需要安装并引用<code>babel-plugin-transform-runtime</code>这个包，然后在代码中require包<code>babel-runtime</code>（即使你使用了<code>polyfill</code>）</p><h2 id="babel-6使用"><a href="#babel-6使用" class="headerlink" title="babel 6使用"></a>babel 6使用</h2><h3 id="基础项目使用-es6"><a href="#基础项目使用-es6" class="headerlink" title="基础项目使用 es6"></a>基础项目使用 es6</h3><p>只需要安装<code>babel-core</code>和<code>babel-preset-es2015</code>插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-core</span> babel<span class="literal">-preset</span><span class="literal">-es2015</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>配置文件<code>.babelrc</code>中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以直接写在<code>package.json</code>中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&quot;babel&quot;: &#123;</span><br><span class="line">&quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babelrc文件"><a href="#babelrc文件" class="headerlink" title=".babelrc文件"></a><code>.babelrc</code>文件</h3><p>Linux中rc结尾的文件通常代表运行时自动加载的文件，配置等，类似<code>bashrc</code>，<code>zshrc</code>，在babel6中<code>.babelrc</code>十分必要，用来设置转码规则和插件<br><code>presets</code>字段：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-es2015</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-react</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-stage</span><span class="literal">-0</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-stage</span><span class="literal">-1</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-stage</span><span class="literal">-2</span></span><br><span class="line"><span class="variable">$</span> npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-preset</span><span class="literal">-stage</span><span class="literal">-3</span></span><br></pre></td></tr></table></figure><p>除了<code>preset</code>和<code>plugins</code>选项，还有<code>env</code>选项，用来指定不同的环境变量，运行不同的编译操作，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;production&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;transform-react-constant-elements&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env</code>的值会从<code>process.env.BABEL_ENV</code>中获取，当它不可用时会使用<code>process.env.NODE_ENV</code>，当这个也不可用时，会默认使用<code>development</code></p><h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><p>Unix:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># at the start of a command</span><br><span class="line">$ BABEL_ENV=production YOUR_COMMAND_HERE</span><br><span class="line"></span><br><span class="line"># or as a separate command</span><br><span class="line">$ NODE_ENV=production</span><br><span class="line">$ YOUR_COMMAND_HERE</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ SET BABEL_ENV=production</span><br><span class="line">$ YOUR_COMMAND_HERE</span><br></pre></td></tr></table></figure><h4 id="通过package-json使用"><a href="#通过package-json使用" class="headerlink" title="通过package.json使用"></a>通过<code>package.json</code>使用</h4><p>将配置写在<code>package.json</code>中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;my-package&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// my babel config here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>安装四个程序命令到全局环境<br><code>babel</code>：<strong>编译js文件</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">babel example.js</span><br></pre></td></tr></table></figure><p><code>babel-node</code>：<strong>提供支持ES6的REPL环境，也可以直接运行es6脚本</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">babel<span class="literal">-node</span></span><br><span class="line">&gt; (x =&gt; x * <span class="number">2</span>)(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">or</span><br><span class="line">babel<span class="literal">-node</span> es6.js</span><br></pre></td></tr></table></figure><p><code>babel-doctor</code>：<strong>检查babel状况</strong><br>主要检查以下几个内容：<br>是否发现了.babelrc配置文件<br>是否有重复的 babel 安装包，比如说安装了 5 和 6<br>所有的 babel 安装包是否已经升级到了最新版<br>并且 npm &gt;= 3.3.0</p><p><code>babel-external-helpers</code>：<strong>将一些公共的帮助函数提取成一个文件</strong></p><h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p><code>babel-register</code>模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 Babel 进行转码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span><span class="literal">-dev</span> babel<span class="literal">-register</span></span><br></pre></td></tr></table></figure><p>使用时，必须首先加载<code>babel-register</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">&quot;babel-register&quot;</span>);</span><br><span class="line">require(<span class="string">&quot;./index.js&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后，就不需要手动对index.js转码了。</p><p>需要注意的是，<code>babel-register</code>只会对<strong>require</strong>命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p><h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用 Babel 的 API 进行转码，就要使用<code>babel-core</code>模块。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var babel = require(<span class="string">&#x27;babel-core&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// 字符串转码</span><br><span class="line">babel.transform(<span class="string">&#x27;code();&#x27;</span>, options);</span><br><span class="line">// =&gt; &#123; code, map, ast &#125;</span><br><span class="line"></span><br><span class="line">// 文件转码（异步）</span><br><span class="line">babel.transformFile(<span class="string">&#x27;filename.js&#x27;</span>, options, function(err, result) &#123;</span><br><span class="line">  result; // =&gt; &#123; code, map, ast &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 文件转码（同步）</span><br><span class="line">babel.transformFileSync(<span class="string">&#x27;filename.js&#x27;</span>, options);</span><br><span class="line">// =&gt; &#123; code, map, ast &#125;</span><br><span class="line"></span><br><span class="line">// Babel AST转码</span><br><span class="line">babel.transformFromAst(ast, code, options);</span><br><span class="line">// =&gt; &#123; code, map, ast &#125;</span><br></pre></td></tr></table></figure><h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-polyfill</span>  -<span class="literal">-save</span> </span><br></pre></td></tr></table></figure><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。</p><p>举例来说，ES6 在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p><p>在脚本头部，加入如下一行代码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&#x27;babel-polyfill&#x27;</span>;</span><br><span class="line">// 或者</span><br><span class="line">require(<span class="string">&#x27;babel-polyfill&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="babelify"><a href="#babelify" class="headerlink" title="babelify"></a>babelify</h3><p><a href="https://www.npmjs.com/package/babelify">Babel browserify transform.</a><br>将代码打包成浏览器可以使用的脚本，可以配合<code>Browserify</code>使用</p><h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;browserify&#x27;</span>, [<span class="string">&#x27;browserify-vendor&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> browserify(&#123; <span class="attr">entries</span>: <span class="string">&#x27;app/main.js&#x27;</span>, <span class="attr">debug</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .external(dependencies)</span><br><span class="line">    .transform(babelify, &#123; <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>, <span class="string">&#x27;react&#x27;</span>] &#125;)</span><br><span class="line">    .bundle()</span><br><span class="line">    .pipe(source(<span class="string">&#x27;bundle.js&#x27;</span>))</span><br><span class="line">    .pipe(buffer())</span><br><span class="line">    .pipe(sourcemaps.init(&#123; <span class="attr">loadMaps</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    .pipe(gulpif(production, uglify(&#123; <span class="attr">mangle</span>: <span class="literal">false</span> &#125;)))</span><br><span class="line">    .pipe(sourcemaps.write(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;public/js&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> browserify script.js <span class="literal">-o</span> bundle.js <span class="literal">-t</span> [ <span class="type">babelify</span> --<span class="type">presets</span> [ <span class="type">es2015</span> <span class="type">react</span> ] ]</span><br></pre></td></tr></table></figure><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">&quot;browserify&quot;</span>);</span><br><span class="line">browserify(<span class="string">&quot;./script.js&quot;</span>)</span><br><span class="line">  .transform(<span class="string">&quot;babelify&quot;</span>, &#123;<span class="attr">presets</span>: [<span class="string">&quot;es2015&quot;</span>, <span class="string">&quot;react&quot;</span>]&#125;)</span><br><span class="line">  .bundle()</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">&quot;bundle.js&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> babel </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequelize</title>
      <link href="2017/08/01/Sequelize/"/>
      <url>2017/08/01/Sequelize/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>ORM</code>（Object-Relational Mapping）框架，把关系数据库的表结构映射到对象上，帮助把对象变成数据库中的行，使得我们读写的都是<strong>JavaScript</strong>对象。</p></blockquote><h2 id="sequelize-cli"><a href="#sequelize-cli" class="headerlink" title="sequelize-cli"></a>sequelize-cli</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> sequelize<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p><code>sequelize-cli</code> 用于支持数据迁移和项目引导，类似于<code>Phinx</code>。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在项目目录下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize init</span><br></pre></td></tr></table></figure><p>项目文件夹下会生成<code>migrations</code>，<code>models</code>，<code>seeders</code>三个文件夹和<code>config.json</code>数据库配置文件，修改<code>config.json</code>配置为该项目的数据库账号和密码。</p><h3 id="创建表-Model"><a href="#创建表-Model" class="headerlink" title="创建表 Model"></a>创建表 Model</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize model:create -<span class="literal">-name</span> books -<span class="literal">-attributes</span> <span class="string">&#x27;id:integer,title:string,content:text,create_time:date&#x27;</span></span><br></pre></td></tr></table></figure><p>在<code>models</code>下面生成<code>books</code>的 model，在<code>migrations</code>生成迁移文件：<code>时间-create-books.js</code></p><p>生成的<strong>books.js</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">sequelize, DataTypes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Books = sequelize.define(<span class="string">&#x27;Books&#x27;</span>, &#123;</span><br><span class="line">    id: DataTypes.INTEGER,</span><br><span class="line">    title: DataTypes.STRING,</span><br><span class="line">    content: DataTypes.TEXT,</span><br><span class="line">    create_time: DataTypes.DATE</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    classMethods: &#123;</span><br><span class="line">      associate: <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// associations can be defined here</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> Books;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建migrations"><a href="#创建migrations" class="headerlink" title="创建migrations"></a>创建migrations</h3><p>增加列 column</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize migration:create -<span class="literal">-name</span> <span class="built_in">add-pricecolumn</span><span class="literal">-to</span><span class="literal">-books</span></span><br></pre></td></tr></table></figure><p>执行后在<code>migrations</code>文件夹下生成文件<code>时间-add-pricecolumn-to-books</code></p><p>修改内容为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  up: <span class="function"><span class="keyword">function</span> (<span class="params">queryInterface, Sequelize</span>) </span>&#123;</span><br><span class="line">    queryInterface.addColumn(<span class="string">&#x27;books&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, &#123;</span><br><span class="line">      type: Sequelize.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: <span class="function"><span class="keyword">function</span> (<span class="params">queryInterface, Sequelize</span>) </span>&#123;</span><br><span class="line">    queryInterface.removeColumn(<span class="string">&#x27;books&#x27;</span>, <span class="string">&#x27;price&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与php的Phinx相似，<code>up</code>是迁移同步时操作，<code>down</code>是回滚操作</p><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize db:migrate</span><br></pre></td></tr></table></figure><p>遍历执行<code>migrations</code>下的迁移文件</p><h2 id="sequelize-使用"><a href="#sequelize-使用" class="headerlink" title="sequelize 使用"></a>sequelize 使用</h2><h3 id="安装mysql2和sequelize模块"><a href="#安装mysql2和sequelize模块" class="headerlink" title="安装mysql2和sequelize模块"></a>安装mysql2和sequelize模块</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install sequelize -<span class="literal">-save</span></span><br><span class="line">npm install mysql2 -<span class="literal">-save</span> </span><br></pre></td></tr></table></figure><p><code>mysql2</code>作为<code>sequelize</code>的驱动</p><h3 id="sequelize配置"><a href="#sequelize配置" class="headerlink" title="sequelize配置"></a><code>sequelize</code>配置</h3><p><code>config</code>文件夹下定义<code>config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> config= &#123;</span><br><span class="line">    sequelize:&#123;</span><br><span class="line">        username: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database: <span class="string">&#x27;sequelize&#x27;</span>,</span><br><span class="line">        host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        dialect: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">        define: &#123;</span><br><span class="line">            underscored: <span class="literal">false</span>,</span><br><span class="line">            timestamps: <span class="literal">true</span>,</span><br><span class="line">            paranoid: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h3 id="实例化数据库对象并导入表Model"><a href="#实例化数据库对象并导入表Model" class="headerlink" title="实例化数据库对象并导入表Model"></a>实例化数据库对象并导入表Model</h3><p>项目根目录下新建<code>sqldb</code>文件夹，创建<code>index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Sequelize = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line">sequelize: <span class="keyword">new</span> Sequelize(config.sequelize.database,config.sequelize.username, config.sequelize.password, config.sequelize)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">db.Books= db.sequelize.import(<span class="string">&#x27;../model/books.js&#x27;</span>); <span class="comment">//数据库导入Model</span></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><p><code>db.sequelize.import()</code>导入表model到数据库，利用<code>sequelize</code>的命令创建或者自定义<code>model</code></p><h3 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h3><p><code>app.js</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sqldb = <span class="built_in">require</span>(<span class="string">&#x27;./sqldb&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// force: true will drop the table if it already exists</span></span><br><span class="line">sqldb.sequelize.sync(&#123;<span class="attr">force</span>: <span class="literal">false</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Server successed to start&quot;</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Server failed to start due to error: %s&quot;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>sqldb.sequelize.sync</code>接口用于同步模型到数据库。</p><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>在路由文件中如<code>routes/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../sqldb&#x27;</span>);  <span class="comment">//引入数据库对象</span></span><br><span class="line"><span class="keyword">var</span> Books= db.Books;  <span class="comment">//获取数据库model</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/add/book&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> saveBook= &#123;</span><br><span class="line">    id: req.body.id,  </span><br><span class="line">    title: req.body.title,</span><br><span class="line">    content: req.body.content,</span><br><span class="line">    create_time: req.body.create_time</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> db.sequelize.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> User.create(saveBook, &#123;</span><br><span class="line">      transaction: t</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      res.send(result);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;发生错误：&quot;</span> + err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
